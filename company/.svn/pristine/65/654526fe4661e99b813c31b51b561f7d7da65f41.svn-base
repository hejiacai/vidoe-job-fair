<?php
/**
 * 
 * 11测试用11例211211ff222221222111
 * @author ZhangYu
 *
 */
	class controller_test extends components_cbasepage {
		private $audition_day       = 1;//邀请面试是第2天
		private $get_linkway_day    = 7; //获取联系方式是7天后
		private $limit              = 100;//一次啦100条数据
		private $total              = 0;
		public  $service_getlinkway = null;
		public  $service_job        = null;
		public  $service_appraise   = null;
		public  $service_company    = null;
		public  $service_jobsort    = null;

		function __construct() {
			parent::__construct(false);
	    }
		

		public function index(){
			/**
			 * 重庆套餐各套餐点数消费
			 * $params 数据如下
			 * consume_type  参数必填，且只有以下值
			 *
			 * refresh 职位刷新 			传job_id
			 * chat    聊一聊   			传resume_id，company_id，person_id
			 * get_link 获取联系方式     传 resume_id，company_id，
			 * invite  邀请面试          传 resume_id，company_id
			 * accounts  子账号         	传 company_id
			 * apply    投递           暂缺
			 *
			 * 统一返回数组 如array('code' => 200 , 'msg' => '企业子账号个数扣除成功', 'result' => true);  result=true 扣除相应点数成功
			 * 注:职位刷新逻辑已在方法里已经处理，其他逻辑自行根据返回结果处理
			 */
			$company_resources            = base_service_company_resources_resources::getInstance($this->_userid);
			$params = array(
				'consume_type' => 'refresh',
				'job_id'		=> 1111
			);
			$consume_result = $company_resources->consume('cq_setmeal_consume',$params);
		}

		//临时同步mogo企业操作日志
	    function pageupdateMongologsToDB()
		{
			$xx = new base_service_company_companyaccountlog();
			$xx->updateMongologsToDB();
		}

		public function pagegetPerson(){
			$service_person_person = new base_service_person_person();
			$person_info = $service_person_person->getPersonByNewRegster();
			$service_person_apply = new base_service_person_apply();
			$apply_info = $service_person_apply->getApplyByNewApply();

			$service_fair_comment = new base_service_fair_comment();

			$info = $service_fair_comment->getCompanyListByComment(10,1);
			var_dump($info);

		}

        function pageTestBindAccount($inPath)
        {
            ini_set("display_errors", "On");
            error_reporting(E_ALL || E_STRICT);
            $service_company = new base_service_company_company();
            $company = $service_company->newLoginTest('17388202086', 'a.company_id,a.company_name,a.company_logo_path,b.account_id,b.is_main,b.user_name,a.site_type', true);
            var_dump($company);

            $service_related = base_service_hractivity_related::getInstance();
            $related_info    = $service_related->getPersonByAccount($company["account_id"],"person_id,company_id,account_id");
           if(!empty($related_info)){
               var_dump("begion ");
           }
            var_dump($related_info);

        }


	    function pageTestCharge($inPath) {
            $link = "http://m.huibo.com/share/NewIndex/?key=15525596&ac=2&flag=entmz1j59";
            
            SQrcode::png($link);
	    }

	    /**
	     * 
	     * 公司模板测试
	     * @param $inPath
	     */
		function pageTestCompanyTemplate($inPath) {
			$service_templatehelper = new base_service_load(new base_service_common_templatehelper());
			$template = $service_templatehelper->getCompanyTemplate('04');
			var_dump($template);
			$arr = array('[@单位名称]'=>'重庆人才网','[职位名称]'=>'软件工程师');	
			$content = $service_templatehelper->replaceFromContent($arr,$template->Content);
			var_dump($content);
		}
		
		function pageApplyList() {
			// 时间test
			$time = 7;
			$date = date('Y-m-d',strtotime("-{$time} days")).' 00:00:00';
			var_dump($date);
			
		}
		
	public function pageHistory($inPath) {
		$params = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
		$resume_id = base_lib_BaseUtils::getStr($params['resumeid'],'int',0);		
		$this->_getResumeHistoryRecord($this->_userid, $resume_id);
	}	
		
		
	/**
	 * 获取简历历史记录	
	 */
	private function _getResumeHistoryRecord($company_id,$resume_id) {
		$service_apply  = new base_service_company_resume_apply();
		$service_invite = new base_service_company_resume_jobinvite();
		$service_remark = new base_service_company_resume_resumeremark();
		$applys = $service_apply->getApplyByPerson($company_id,$resume_id,null,'station,create_time'); //TODO:字段
		$invites= $service_invite->getInviteList($resume_id,$company_id,'station,create_time,audition_time');	
		$remarks = $service_remark->getResumeRemarkList($company_id, $resume_id, null, 'remark,update_time');
		$search_refuse = function ($date) {
		  return function ($apply) use ($date) { return $apply['re_status']==3&& date('Y-m-d',strtotime($apply['create_time']))==$date; };
		};
		$search_norefuse = function ($date) {
		  return function ($apply) use ($date) { return $apply['re_status']!=3&& date('Y-m-d',strtotime($apply['create_time']))==$date; };
		};	
		$search_invite = function ($date) {
		    return function ($invite) use ($date) { return date('Y-m-d',strtotime($invite['create_time']))==$date; };
		};
		$search_remark = function ($date) {
		   return function ($remark) use ($date) { return  date('Y-m-d',strtotime($remark['update_time']))==$date; };
		};
		
		$items = array();
		for ($i = 0; $i <= 90; $i+=1){			
			 $d  = date('Y-m-d',strtotime("-{$i} days"));
			 $arr_refuseapplys = array_filter($applys->items, $search_refuse($d));
			 $arr_invite =  array_filter($invites->items, $search_invite($d));
			 $arr_refuseapplys = base_lib_BaseUtils::array_sort($arr_refuseapplys, 'create_time');
			 $arr_invite = base_lib_BaseUtils::array_sort($arr_invite, 'create_time');
			 $apply  =reset($arr_refuseapplys);
			 $invite  =reset($arr_invite);
			 // 邀请
			 if($apply&&$invite) {
			 	if(strtotime($apply['create_time'])>strtotime($invite['create_time'])) {
			 		array_push($items,array('time'=>$d,'content'=>"邀请面试:面试职位【{$invite['station']}】，面试时间【{$invite['audition_time']}】"));
			 	}else {
			 		array_push($items,array('time'=>$d,'content'=>'婉言谢绝'));
			 	}
			 }elseif($apply) {
			 		array_push($items,array('time'=>$d,'content'=>'婉言谢绝'));			 		
			 }elseif($invite) {
			 		array_push($items,array('time'=>$d,'content'=>"邀请面试:面试职位【{$invite['station']}】，面试时间【{$invite['audition_time']}】"));
			 }
			 // 求职申请	 
			 $arr_apply = array_filter($applys->items, $search_norefuse($d));
			 if(count($arr_apply)>0) {
			 	array_push($items,array('time'=>$d,'content'=>'应聘职位：'. $this->_arrFieldJoin($arr_apply,'station')));	
			 }			 
			 
			 // 简历备注
			 $arr_remark = array_filter($remarks->items, $search_remark($d));
			 if(count($arr_remark)>0) {
			 	array_push($items,array('time'=>$d,'content'=>'添加备注：'. $this->_arrFieldJoin($arr_remark,'remark')));	
			 }
		     
			 // 30天以内有记录
			 if($i==30) {
			 	if(count($items)>0) {
			 		echo '近30天有记录';
			 	}	
			 }
		}	
		var_dump($items);	
	}	

		// 将数组中的字段连接起来
	private function _arrFieldJoin($arr,$field,$separator=',') {
   	   $new_arr = array();
   	   foreach ($arr as $item){
			array_push($new_arr, $item[$field]);
	   }
	   return implode($separator,$new_arr);		
    }	
	
		function pageIndex($inPath){
			  $company_resources = base_service_company_resources_resources::getInstance(114509992);
                $ismember = $company_resources->isMember();
			var_dump($ismember);die();
			//$agelower = date('Y')-15;
			print_r(strtotime(date('Y-m')));
			//echo $agelower
			/*$audit['audit_time'] = "2014-01-15 00:12:35";
			
			$audittime = date('Y-m-d',strtotime($audit['audit_time']));					
			$timediff = strtotime(date('Y-m-d','1964-4-20')) - strtotime($audittime);
			$days = intval($timediff/86400);*/
			
			
//			$postvar['person_id'] = 11;//当前登录用户
//			$postvar['page_index'] = 1;//当前页面
//			$postvar['page_size'] = 20;//每页显示数
//			$servcie_sphinx = new base_service_sphinx_sphinx();
//			$result = $servcie_sphinx->getPageRecommend($postvar);
//			
//			print_r($result);

/*			$pathdata = base_lib_BaseUtils::sstripslashes($this->getUrlParams($inPath));
 			$keyword = base_lib_BaseUtils::getStr($pathdata['txtKeyword'],'string',"");
			$servcie_sphinx = new base_service_sphinx_sphinx();
			
			$postvar['keyword'] = $keyword;
			
			$result= $servcie_sphinx->getFilterCompany($postvar);
			
			$this->_aParams["companys"] = $result["company_name"];
			$this->_aParams["total"]  = $result["total"];
			
			
			print_r($keyword);
			return $this->render('./test.html', $this->_aParams);*/
			/*
			$jobsortService = new base_service_common_indexjobsort();
			$jobSorts = $jobsortService->getAllJobsort();
			$topSorts = $jobsortService->getTopJobsort();
			
			$sorts = array();
			
			foreach ($topSorts as $key=>$value){
				$sorts[$value["jobsort"]]["id"]=$value["jobsort"];
				$sorts[$value["jobsort"]]["name"]=$value["jobsort_name"];
				$subSorts = array(); 
				foreach ($jobSorts as $sKey=>$sValue){
					if($sValue["parent_id"] == $value["jobsort"]){
						$subSorts[$sKey]["id"] = $sValue["jobsort"];
						$subSorts[$sKey]["name"] = $sValue["jobsort_name"];
						$subSorts[$sKey]["order"] = $sValue["order_no"];				
						$tSorts = array();
						foreach ($jobSorts as $tKey=>$tValue){
							if($tValue["parent_id"] == $sValue["jobsort"]){
								$tSorts[$tKey]["id"] = $tValue["jobsort"];
								$tSorts[$tKey]["name"] = $tValue["jobsort_name"];								
							}
						}
						$subSorts[$sKey]["sub"] = array_values($tSorts);
					}
				}
				$sorts[$value["jobsort"]]["sub"] = array_values($subSorts);
			}
			
			
			
			
			
			$jsonstr =  json_encode(array_values($sorts));
			
			//$jsonstr = str_replace("{", "[{", $jsonstr);
			//$jsonstr = str_replace("}", "}]", $jsonstr);
			
			echo $jsonstr;*/
			//print_r($sorts["01"]);

		}
		
		function pageTime($inPath){
			print_r(date("Y-m-d H:i:s","1388412591"));
		}
		
		//上传组件后端测试
		function pageUploadfile($inPath){
			return $this->render('./uploadfile.html', $this->_aParams);
		}
		
		//上组件后端上传到资源服务器测试
		function pageUploadfileDo($inPath){
			$file = $_FILES['Filedata'];
			
			$extension_name = base_lib_BaseUtils::fileext($file['name']);
			
			$xml = SXML::load('../config/company/CompanyPersonalizedTemplate.xml');
			if(!is_null($xml)){
				$logofolder = $xml->LogoFolder;
				$companyTemplatePath = $xml->CompanyTemplatePath;
				$virtualName = $xml-> VirtualName;
			}
			
			$path = "{$companyTemplatePath}{$logofolder}";
			
			
			$fileParts = pathinfo($file['name']);
			$postvar['path'] = $path;//存放路径 配置文件件读取
			$postvar['name'] = date("YmdHis").rand(1, 100).'.'.$extension_name;
			//$postvar['type'] = 'file';//表示上传文件，默认上传图片
			
			$postvar['maxWidth'] = 600; //图片最大宽度,上传图片时必填
			$postvar['maxHeight'] = 600; //图片最大高度,上传图片时必填
			
			$postvar['thumbMaxWidth'] = 210;//缩略图最大宽度,非必填
			$postvar['thumbMaxHeight'] = 137; //缩略图最大高度,非必填
			$postvar['thumbSuffix'] = 'thumb'; //缩略图后缀,非必填
			
			//调用方法 成功返回{'success',true}
			$result = base_lib_Uploadfilesv::postfile($postvar, $file['name'],$file['tmp_name'], $file['type']);
			
			print_r($result);
			echo base_lib_Constant::UPLOAD_FILE_URL.'/'.$virtualName.'/'.$logofolder.'/'.$postvar['name'];
		}
		
		function pageMoveFile($inPath){
			
			$fileName = array('2013102317585530.gif','2013102413594510.jpg','2013102413594634.jpg');
			
			$postvar['newfile'] = "D:\IMGVirtual\CompanyImages\Logo";
			$postvar['oldfile'] = "D:\IMGVirtual\CompanyTemplates\Logo";
			$postvar['names'] = $fileName;
			$postvar['thumbSuffix'] = 'thumb';
			$postvar['authenticate'] = "photo";
			base_lib_Uploadfilesv::moveFile($postvar);
		}
		
		function pageDelFile($inPath){
			$postvar['file'] = "D:\IMGVirtual\CompanyImages\Logo";
			$fileName = array('2013102317585530.gif','2013102413594510.jpg','2013102413594634.jpg');
			$postvar['names'] = $fileName;
			$postvar['thumbSuffix'] = 'thumb';
			$postvar['authenticate'] = "photo";
			base_lib_Uploadfilesv::delFile($postvar);
		}
		
		function pageShowThumbnail($inpath){
			print_r(getimagesize('D:\IMGVirtual\CompanyTemplates\Logo\1.gif'));
		}
		
		function pageHtmlDwon($inpath){
			return $this->render('./test.html', $this->_aParams);
		}
		
		function pageDate($inPath){
			$imgsrc = base_lib_BaseUtils::getThumbImg("//assets.huibo.com/photo/2012-10-26/1026157432.jpg",100,100);
			
			
			print_r($imgsrc);
//			$begin_date=date('Y-m',strtotime("2012-6-25"));
//			$end_date=date('Y-m',strtotime(date('Y-m-d')));
//			
//			list($y1,$m1) = explode('-',$begin_date); 
//			list($y2,$m2) = explode('-',$end_date); 
//			$y = $m = 0; 
//			$math = ($y2-$y1)*12+$m2-$m1; 
//			$y = floor($math/12); 
//			$m = intval($math%12); 
//			
//			echo $y."年".$m;
//			
//			echo date("Y-m-d",strtotime("-1 years -6 months"));
//			
//			
//			echo '<br/>';
//			
//			echo strtotime("2012/12");
//			
//			
//			$strtime = "";
//			if(empty($strtime)||$strtime=="至今"){
//				$time= null;
//			}else {
//				$stime = explode("/", $strtime);
//				$time = $stime[0].'-'.$stime[1].'-01';
//			}
//			return $time
//			
//			
//			if($stime[0]=="至今"){
//				$start_time = null;
//			}else{
//				$start_time = $stime[0].'-'.$stime[1].'-01';
//			}
//			
//			echo $start_time;
//			
			//echo date('Y-m-d',strtotime("2012/12"));
			
		}
		
		function pageBase64(){
			$base64str = "";
			$data= base64_decode($base64str);
			
			
			$adirPath = '../temp';
			$afileDir = "{$dirPath}/appphoto/";
			$aname = date("md").rand(100000, 999999).'.jpg';
			$afilename = "{$fileDir}/$aname";
			base_lib_BaseUtils::writeFile("{$afilename}",$data);
			
			
			$xml = SXML::load('../config/config.xml');
			if(!is_null($xml)){
				$file_mapping_path = $xml->FileMappingPath;
			}
			
			$personxml = SXML::load('../config/person/upload.xml');
			if(!is_null($personxml)){
				$photo_dir = $personxml->PersonPhotoDir;
				$photo_file_type = $personxml->PersonPhotoFileType;
				$max_size = $personxml->MaxPersonPhotoSize;
			}
			
			$dirpath =$file_mapping_path;
			$photopath = $photo_dir."/".date("Y-m-d");
			$file_name = date("md").rand(100000, 999999);
			
			
			$postvar['type'] = 'personphoto';
			$postvar['path'] = $dirpath.$photopath;
			$postvar['big_size'] = "180x225";
			$postvar['middle_size'] = "120x150";
			$postvar['small_size']="48x60";
			$postvar['name'] = "{$file_name}.jpg";
			$postvar['middle_name'] = "{$file_name}_middle.jpg";
			$postvar['small_name']= "{$file_name}_small.jpg";
			$result = base_lib_Uploadfilesv::postfile($postvar, $aname,$afilename, 'application/octet-stream');
			
			if($result['success']){
				//保存到数据库
				$person['big_photo'] = $photopath."/{$file_name}.jpg";
				$person['has_big_photo'] = 1;
				$person['photo'] = $photopath."/{$file_name}_middle.jpg";
				$person['small_photo']= $photopath."/{$file_name}_small.jpg";			
				$service_person = new base_service_person_person();
				$service_person->updatePerson("person_id = '{$this->_userid}'", $person);
			}
			
//			$dirPath = '../temp';
//			$fileDir = "{$dirPath}/test/1/";
//			$filename = "{$fileDir}/huibo_1.jpg";
//			base_lib_BaseUtils::writeFile("{$filename}",$data);
			//header("Content-type: image/png");
			//echo $filename;
		}
		
		public function pageTestTemp($inPath){
			$service_company = new base_service_company_company();
			$company_info = $service_company->getCompany(28724394, $is_effect,"company_name,info,address");
			
			$this->_aParams["company_info"] = $company_info;
			return $this->render("test.html",$this->_aParams);
		}
        
        //position: loginForm:登录弹窗，register：注册，loginSuccess：登陆成功，joblist:职位管理，apply：简历管理
        public function pageClickCount($inPath){
            
            //mongo分组统计
            $position_arr = [
                "serach_calling"=>"专业搜索",
                "regist"=>"注册",
                "login"=>"登录",
                "login_success"=>"登录成功",
                "regist_success"=>"注册成功"
            ];
            header("Content-type: text/html; charset=utf-8");
            $service_cache_clicks = new base_service_cache_clicks();
            $click_count = $service_cache_clicks->getClicksGroup();
            echo "<table style='border:1px solid #F00'><tr><td>日期</td><td>位置</td><td>点击数</td><td>ip数</td></tr>";
            foreach ($click_count['retval'] as $value) {
//                echo "<tr><td>{$value['date']}</td><td>{$position_arr[$value['position']]}</td><td>{$value['click_total']}</td><td>{$value['ip_total']}</td></tr>";
                echo "<tr><td>{$value['date']}</td><td>{$value['position']}</td><td>{$value['click_total']}</td><td>{$value['ip_total']}</td></tr>";
            }
            echo "</table>";
        }

		public function pageaddress(){
//			$json_string = file_get_contents('./zhilian.json');
//			$json_string = (array)json_decode($json_string);
			$service_job_outerclock = new base_service_job_outerclock();
			$address_list = $service_job_outerclock->getAllAddress();
			$service_common_area = new base_service_common_area();
			$area_list = $service_common_area->getAllArea();

			//var_dump($area_list);
			foreach($address_list as $key=>$value){
				foreach($area_list as $k=>$v){
					if($value['outer_name'].'市' == $v['area_name'] && empty($value['inner_id'])){
						$data = array(
							'inner_id'		=> $v['area_id']
						);
						$service_job_outerclock->updateInnerId($value['id'],$data);
					}
				}
			}

		}
        
        public function pageTest(){
			$service_common_autologinurl = new base_service_common_autologinurl();

        }


		public function pageTestjob(){

			ob_start();
			$service_getlinkway         = new base_service_company_appraise_linkwayget();
			$service_appraise           = new base_service_person_appraise_appraise();
			$service_job                = new base_service_company_job_job();
			$service_company            = new base_service_company_company();
			$service_jobsort            = new base_service_common_jobsort();

			$this->service_getlinkway   = $service_getlinkway;
			$this->service_job          = $service_job;
			$this->service_appraise     = $service_appraise;
			$this->service_company      = $service_company;
			$this->service_jobsort      = $service_jobsort;

			//第一步 获取获取联系方式的数据
			ob_flush();
			flush();
			echo "#=======get_link_way type start========#\n";
			while(true){
				ob_flush();
				flush();
				$get_linkway_day          = $this->get_linkway_day;
				$get_linkway_time         = date("Y-m-d 00:00:00",strtotime("-{$get_linkway_day} days"));
				echo $get_linkway_time;
				$data_list1 = $service_getlinkway->getData($get_linkway_time, "person_id,company_id,get_id,create_time,job_id,station", "get_linkway",$this->limit);
				$data_list2 = $service_getlinkway->getData($get_linkway_time, "person_id,company_id,get_id,create_time,job_id,station", "down_loaded",$this->limit);
				$data_list = array_merge($data_list1,$data_list2);
				var_dump($data_list);
				if(empty($data_list)){
					echo "#=======get_link_way type end  total:{$this->total}========#\n";
					break;
				}
				$this->addAppraise($data_list);
			}
			//第二步 邀请面试的数据
			echo "#=======get_invite type start========#\n";
			while(true){
				ob_flush();
				flush();
				$audition_day        = $this->audition_day;
				$audition_time       = date("Y-m-d 00:00:00",strtotime("-{$audition_day} days"));
				echo $audition_time;
				$data_list = $service_getlinkway->getData($audition_time, "person_id,company_id,get_id,audition_time,job_id,station,get_type,create_time", "invite",$this->limit);

				if(empty($data_list)){
					echo "#=======get_invite type end========#\n";
					break;
				}
				$this->addAppraise($data_list);
				$get_ids = base_lib_BaseUtils::getPropertys($data_list,"get_id");
				$condition_one = array();
				array_push($condition_one, array("get_id"=>array("in"=>$get_ids)));
				$this->service_getlinkway->update($condition_one,array("is_set_appraise"=>1));
			}
			echo "##========add end total:{$this->total}===========##\n";
			return;
		}

		private  function addAppraise($data_list){
			$job_ids    = base_lib_BaseUtils::getPropertys($data_list,"job_id");
			$job_list   = array();
			if(!empty($job_ids)){
				$job_info   = $this->service_job->getJobs($job_ids, "job_id,jobsort");
				$job_list   = base_lib_BaseUtils::array_key_assoc($job_info, "job_id");
			}
			$company_ids = base_lib_BaseUtils::getPropertys($data_list, "company_id");
			if(!empty($company_ids)){
				$company_info   = $this->service_company->getCompanys($company_ids, "company_id,company_name,is_allow_appraise");
				$company_list   = base_lib_BaseUtils::array_key_assoc($company_info, "company_id");
			}
			foreach($data_list as $v){
				ob_flush();
				flush();
				$items = array();
//            if($company_list[$v["company_id"]]['is_allow_appraise'] == "0"){
//                $this->total+=1;
//                echo "#=======wait company_id: {$v["company_id"]}  第{$this->total} 条数据  该企业未开启面试评价========#\n";
//            }else{
				$items["station"] = !empty($v["station"]) ? $v["station"] : "其他";
				$items["job_id"]  = $v["job_id"];
				$jobsort = !empty($job_list[$v["job_id"]]) ? $job_list[$v["job_id"]]["jobsort"] : "";
				if(empty($jobsort)){
					$items["jobsort"] = "011600";
					$items["jobsort1"] = "011699";
				}else{
					$items["jobsort"] = $this->service_jobsort->getParentJobsort($jobsort);
					$items["jobsort1"] = $jobsort;
				}

				$items["company_name"] = $company_list[$v["company_id"]]["company_name"];
				$items["get_type"]      = $v["get_type"];
				$items["get_time"]      = $v["create_time"];

				$result           = $this->service_appraise->addAppraise($v["person_id"],$v["company_id"],$v["create_time"],$items);
				$this->total+=1;
				if($result){
					echo "#=======success person_id:{$v["person_id"]} and company_id: {$v["company_id"]}  第{$this->total} 条数据========#\n";
				}else{
					echo "#=======fail result:{$result}  get_id:{$v["get_id"]} person_id:{$v["person_id"]} and company_id: {$v["company_id"]}========#\n";
				}
//            }
			}

			$get_ids = base_lib_BaseUtils::getPropertys($data_list,"get_id");
			$condition_one = array();
			array_push($condition_one, array("get_id"=>array("in"=>$get_ids)));
			$this->service_getlinkway->update($condition_one,array("is_set_appraise"=>1));
		}

		public function pageTestJobAppraise(){
			//获取所有的求职者已评价，企业未读，未发送短信，评价为差评的面试反馈
			$service_person_appraise_appraise = new base_service_person_appraise_appraise();
			$appraise_list = $service_person_appraise_appraise->getCompanyNotReadBadReviewAll();
			if($appraise_list){
				$appraise_ids = array_unique(base_lib_BaseUtils::getPropertys($appraise_list,"appraise_id"));
				$appraise_list = base_lib_BaseUtils::array_key_assoc($appraise_list,"appraise_id");
				//获取已发送短信的评论
				$service_person_appraise_msglog = new base_service_person_appraise_msglog();
				$send_msg_list = $service_person_appraise_msglog->getSendMsgByAppraiseIds($appraise_ids);
				$send_msg_appraise_ids = array_unique(base_lib_BaseUtils::getPropertys($send_msg_list,"appraise_id"));

				//获取未发送短信的评论id
				$not_send_appraise_ids = array_diff($appraise_ids,$send_msg_appraise_ids);
				if($not_send_appraise_ids){
					$appraise_list_temp = [];
					foreach($not_send_appraise_ids as $key => $val){
						if(isset($appraise_list[$val])){
							array_push($appraise_list_temp,$appraise_list[$val]);
						}
					}
					//给主账号发送短信
					$company_ids = base_lib_BaseUtils::getPropertys($appraise_list_temp,"company_id");
					$service_account = new base_service_company_account();
					$base_lib_SMS = new base_lib_SMS();
					$account_list = $service_account->getMainAccountByCompanys($company_ids, "company_id,account_id,mobile_phone,is_main");
					var_dump($account_list);
					//职位发布账号发短信
					$job_ids = base_lib_BaseUtils::getPropertys($appraise_list_temp,"job_id");
					$service_company_job_job = new base_service_company_job_job();
					$job_list = $service_company_job_job->getJobs($job_ids,"job_id,account_id");
					$job_account_ids = array_unique(base_lib_BaseUtils::getPropertys($job_list,"account_id"));
					$job_account_list = $service_account->getAccountByAccount_ids($job_account_ids,"company_id,account_id,mobile_phone,is_main")->items;
					var_dump($job_account_list);
					//去掉职位发布人为主账号的数据
					foreach($job_account_list as $key => $val){
						if($val['is_main'] == 1){
							unset($job_account_list[$key]);
						}
					}


					//合并数据
					$account_list = empty($job_account_list) ? $account_list : array_merge($account_list,$job_account_list);
					var_dump($account_list);
					$msg_count = "您收到一条低职位相符度的面试反馈，请立即修正职位信息，如果求职者评价不符可进行申诉（申诉有效期15天内）。";

					foreach($appraise_list_temp as $key => $value){
						//主账号发送短信
						foreach($account_list as $k => $v){
							if($value['company_id'] == $v['company_id'] && !base_lib_BaseUtils::nullOrEmpty($v['mobile_phone']) && preg_match('/^[1]\d{10}$/', $v['mobile_phone'])){
								var_dump($v);
								$base_lib_SMS->send($v['mobile_phone'],$msg_count);
								//添加发送日志
								$data = [
									'appraise_id'   => $value['appraise_id'],
									'company_id'    => $v['company_id'],
									'account_id'    => $v['account_id'],
									'mobile_phone'  => $v['mobile_phone'],
									'create_time'   => date("Y-m-d H:i:s"),
								];
								$service_person_appraise_msglog->insert($data);
							}
						}
					}


				}
			}
		}
        
	}
?>