<?php
/**
 * 企业聊一聊
 * @ClassName controller_chat
 * @Desc 自动登录
 * @author huangwentao@huibo.com
 * @date 2016-12-14 上午10:30:46
 */
class controller_chat extends components_cbasepage {
  
    function __construct() {
        parent::__construct(true);
    }

    /**
     * 入口
     */
    public function pageIndex($inPath) {
        $path_data = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $is_https = $this->isHttps();
        if(!$is_https){
            $this->redirect_url2("https:".base_lib_Constant::COMPANY_URL_NO_HTTP."/chat/",$path_data);
        }
        
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        
        
        if(empty($bind_person_id)){
            return $this->render("./chat/notbind.html",$this->_aParams);
        }
        //获取浏览器版本
        $browser = $service_chat->getbrowser();
        if($browser["browser"] == "IE" && $browser["version"] <=8){
            return $this->render("./chat/notchat.html",$this->_aParams);
        }
        $qcloud_data    = $service_chat->qcloud;
        
        //使用线上的 qcloud_data 测试
//        $qcloud_data = [
//                        "qcloud_identifier" => "hr11941388",
//                        "qcloud_usersig"    => "eJxlkF1PgzAYRu-5FQ23M4au7WhNvOgUEpwGzViiVwShjE6*7ApjLP53JzOxidfn5H1y3pMFALCjx-V1kqZNV*tYH1thgxtgO-bVH2xbmcWJjpHK-kExtFKJOMm1UBOcEzZ3HFORmai1zOWvUCgIGYaIUsPZZx-xtDMpEJ8vILZAzFTkdoJP3uYuWK5CuNJeNd5Hh2ZWak*Fnw8lH4sh9UsX*cU7WWBJad9RLj3es3Qm1octbfFRVa8*95ciD7poA98odwdSPu923VgHoXq5NSa1rC7vgAQzhlwXE4P2Qu1lU1*qHUjgucv5Sbe*rG8auF33",
//                        "qcloud_nickname"   => "黄小芬",
//                        "qcloud_photo"      => "http://imgs.huibo.com/photo/2018-09-25/0925219716_middle.jpg",
//                    ];
        $this->_aParams["qcloud_data"]  = $qcloud_data;
        $this->_aParams["appid"]        = company_service_chat::QCLOUD_APPID;
        $this->_aParams["appidAi3rd"]   = company_service_chat::QCLOUD_APPIDAT3RD;
        $this->_aParams["account_type"] = company_service_chat::QCLOUD_ACCOUNTTYPE;
        
        
        //判断是否有简历 带入会话中
        $resume_id      = base_lib_BaseUtils::getStr($path_data["resume_id"],"int",0);
        $job_id         = base_lib_BaseUtils::getStr($path_data["job_id"],"int",0);
        if($resume_id > 0){
            $init_info = $this->_getPreInfo($resume_id,$job_id);
            //测试数据
//            $init_info = [
//                "sessType"          => "",//会话类型
//                "SessionTypeZh"     => "",//会话语言
//                "SessionId"         => "p11941388",//会话ID Sqcloud::PRE_APP_V2.$person_id
//                "SessionNick"       => "测试林小美哦",//会话昵称 为空
//                "SessionImage"      => "http://imgs.huibo.com/photo/2018-10-19/1019368575_middle.png",//会话头像  为空
//                "Account_id"        => "p11941388",//会话ID
//                "UnreadMsgCount"    => 0,//未读消息数 默认是0
//                "ResumeId"          => "7028183",//简历编号
//                "SessionJobId"      => "8620976",//聊天职位编号
//                "SessionJobStation" => "文员测试文员",//聊天职位//可以为空
//                "MsgTimeStamp"      => time()
//            ];
        }
        $this->_aParams['resume_id'] = $resume_id;
        $this->_aParams['job_id'] = $job_id;
        $this->_aParams["has_init_info"] = false;
        if(!empty($init_info)){
            $this->_aParams["has_init_info"] = true;
            $this->_aParams["init_info"]     = json_encode($init_info);
        }
        
        //常用语
        $service_template = new base_service_hractivity_msgtemplate();
        $template_count   = $service_template->getTemplateCount($bind_person_id);
        if($template_count <= 0){
            $service_template->addDefaultTemplates($bind_person_id,$company_id,$account_id); //添加默认短语
        }
        $template_list    = $service_template->getTemplateByPerson($bind_person_id,"id,create_time,content");
        //如果没有 则添加5个默认常用语
        
        $return_template = array();
        if(!empty($template_list)){
            foreach($template_list as $value){
                array_push($return_template,array("id" => (string)$value["id"],"content" => $value["content"]));
            }
        }
        $this->_aParams["template_list"] = json_encode($return_template);
        
        //公司地址
        $service_company_companyaddress = new base_service_company_companyaddress();
        $address_list = $service_company_companyaddress->getAddressListByCompanyId($company_id,1)->items;
        $this->_aParams["address_list"] = json_encode($address_list);


        //校园网络招聘会招聘会
        $net_apply_id   = base_lib_BaseUtils::getStr($path_data["net_apply_id"],"int",0);
        $sid            = base_lib_BaseUtils::getStr($path_data["sid"],"int",0); 
        
        if(!empty($net_apply_id)){
            $service_net_apply  = new base_service_schoolnet_shuangxuanpersonapply();
            $service_channel    = new base_service_schoolnet_channel();
            $apply_info         = $service_net_apply->getApplyById($net_apply_id,"company_id,sid,create_time,status,source,person_id");
            //判断该求职者是否正在与其他人面试
            $is_on_interview = $service_channel->checkPersonIsOnInterview($apply_info["person_id"], $account_id);
            if($is_on_interview){
                $this->_aParams["error_msg"]    = "该求职者正在与其他企业面试，请稍后...";
                $this->_aParams["sid"]          = $apply_info["sid"];
                $this->_aParams["back_url"]     = base_lib_Constant::COMPANY_URL_NO_HTTP."/videohall/VideoInterviewHall/?sid=".$apply_info["sid"];
                $this->_aParams["buttom_name"]  = "返回求职者大厅";
                return $this->render("./chat/videoerror.html",$this->_aParams);
            }
            //该企业是否在与其他人面试
            $cache_channel_data = $service_channel->getChannelByAccount($account_id);
            if(!empty($cache_channel_data)){
                $_person_id     = $cache_channel_data["person_id"];
                $service_person = new base_service_person_person();
                $person_info    = $service_person->getPerson($_person_id, "person_id,user_name");
                $_end_time      = $cache_channel_data["start_time"] + 600;;
                $diff_time      = $_end_time - time();
                $diff_minutes   = ceil($diff_time/60);
                if($cache_channel_data["net_apply_id"] != $net_apply_id){
                    if($diff_time > 0){
                        $this->_aParams["error_msg"]    = "同时间仅能面试1人，检测到您与学生（{$person_info["user_name"]}）已在面试中，请先结束面试或等待{$diff_minutes}分钟后，发起新的面试";
                        $this->_aParams["sid"]          = $apply_info["sid"];
                        $this->_aParams["back_url"]     = base_lib_Constant::COMPANY_URL_NO_HTTP."/videohall/VideoInterviewHall/?sid=".$apply_info["sid"];
                        $this->_aParams["buttom_name"]  = "返回求职者大厅";
                        return $this->render("./chat/videoerror.html",$this->_aParams);
                    }else{
                        $service_channel->setChannelEnd($cache_channel_data["channel_id"], $account_id); //如果超过10分钟结束上一个面试
                    }
                }
            }
            
            $this->_aParams["apply_source"] = $apply_info["source"];
            if($apply_info["source"] == 1){
                if($apply_info["status"] !=0 && $apply_info["status"] != 1){
                    $this->_aParams["error_msg"]    = "您已经面试过该求职者了，不能重复面试";
                    $this->_aParams["sid"]          = $apply_info["sid"];
                    $this->_aParams["back_url"]     = base_lib_Constant::COMPANY_URL_NO_HTTP."/videohall/VideoInterviewHall/?sid=".$apply_info["sid"];
                    $this->_aParams["buttom_name"]  = "返回求职者大厅";
                    return $this->render("./chat/videoerror.html",$this->_aParams);
                }
                
            }else{
                //获取企业今日面试时间 如果超过3小时 则
                $service_channel        = new base_service_schoolnet_channel(); //获取企业今日面试时长
                $total_time             = $service_channel->getCompanyInterviewTime($company_id, 2);
                $allow_total_time       = 3*3600; //一天允许3小时
                if($total_time >= $allow_total_time){
                    $this->_aParams["error_msg"] = "今日面试时间已用完，可明日继续";
                    $this->_aParams["sid"]       = $apply_info["sid"];
                    $this->_aParams["back_url"]  = base_lib_Constant::COMPANY_URL_NO_HTTP."/videohall/JobWanters/?sid=".$apply_info["sid"];
                    $this->_aParams["buttom_name"]  = "返回面试大厅";
                    return $this->render("./chat/videoerror.html",$this->_aParams);
                }
            }
            if(empty($apply_info) || $apply_info["company_id"] != $company_id){
                $net_apply_id = 0;
            }
        }
        $this->_aParams["sid"]          = !empty($apply_info) ? $apply_info["sid"] : 0;
        $this->_aParams["net_apply_id"] = $net_apply_id;
        $service_company = new base_service_company_company();
        $company_info    = $service_company->getCompany($this->_userid, 1, "company_name");
        $this->_aParams["company_name"] = $company_info["company_name"];
        return $this->render("./chat/index.html",$this->_aParams);
    }
    
    
    private function _getPreInfo($resume_id,$job_id){
        //初始化聊天人信息
        $init = [
            "sessType"          => "",//会话类型
            "SessionTypeZh"     => "",//会话语言
            "SessionId"         => "",//会话ID Sqcloud::PRE_APP_V2.$person_id
            "SessionNick"       => "",//会话昵称 为空
            "SessionImage"      => "",//会话头像  为空
            "Account_id"        => "",//会话ID
            "UnreadMsgCount"    => 0,//未读消息数 默认是0
            "ResumeId"          => "",//简历编号
            "SessionJobId"      => "",//聊天职位编号
            "SessionJobStation" => "",//聊天职位//可以为空
            "MsgTimeStamp"      => time()
        ];
        $service_resume = new base_service_person_resume_resume();
        $service_person = new base_service_person_person();
        $service_job    = new base_service_company_job_job();
        $resume_info    = $service_resume->getResume($resume_id,"person_id");
        if(empty($resume_info)){
            return null;
        }
        $person_id      = $resume_info["person_id"];
        $person_info    = $service_person->getPerson($person_id, "user_name,small_photo,open_mode");
        if(empty($person_info)){
            return null;
        }
        //判断该简历是否下载 如果没有下载则不能聊天
        $service_apply =         new base_service_company_resume_apply();
        $accountid = base_lib_BaseUtils::getCookie('accountid');
        $company_resources = base_service_company_resources_resources::getInstance($this->_userid,true,$accountid);
        $service_download       = new base_service_company_resume_download();
        
        $is_apply = $service_apply->isApply($company_resources->all_accounts, $resume_id);
//        if(!$is_apply){ //如果没有投递 则判断是否下载
//            $download_info = $service_download->getResumeDownload($this->_userid,$resume_id,'down_time');
//            if(empty($download_info)){
//                $this->showErrorPage("没有下载该简历，不能聊天");
//            }
//        }
        //导入求职者账号
        $service_sqloud_person          = new Sqcloud("APP");
        $user_sig                       = $service_sqloud_person->getUserSig($person_id); //如果未同步账号,该方法会导入账号 聊天必须调此方法
        $default_photo                  = base_lib_Constant::STYLE_URL."/img/common/user120_150.jpg";
        $init["SessionId"]      = Sqcloud::PRE_APP_V2.$person_id;
        $init["Account_id"]     = Sqcloud::PRE_APP_V2.$person_id;
        $init["ResumeId"]       = $resume_id;
        $init["SessionNick"]    = $person_info["user_name"];
        $init["SessionImage"]   = empty($person_info['small_photo']) ? $default_photo : base_lib_Constant::YUN_ASSETS_URL_NO_HTTP . "{$person_info['small_photo']}";
        $job_info = $service_job ->getJob($job_id, "station,company_id");
        if(!empty($job_info)){
            if(!in_array($job_info["company_id"], $company_resources->all_accounts)){
                $this->showErrorPage("参数错误，您没有该职位");
            }
            $init["SessionJobId"]           = $job_id;
            $init["SessionJobStation"]      = $job_info["station"];
        }
        return $init;
    }
    
    /**
     *@desc 验证求职者身份 
     */
    public function pageSendMobileCode($inPath){
        $path_data      = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $validator      = new base_lib_Validator();
        $mobile_phone   = $validator->getMobile($path_data['phone'], "手机不正确");
        $seed           = base_lib_BaseUtils::getStr($path_data["seed"],"string","");
        $vcode          = base_lib_BaseUtils::getStr($path_data["vild_code"],"string","");

        if($validator->has_err){
            echo json_encode(array("error" => $validator->err[0]));exit;
        }
        //判断图片验证
        $captcha = new SCaptchalu();
        if ($captcha->verify($seed, $vcode) === false) {
            echo json_encode(array("error" =>"验证码错误"));exit;
        }

        $service_company = new base_service_company_company();
        /*--------------boss端企业违规封号处理- 2018-12-15 --------------*/
        $boos_fordden = $service_company->isBossForbid(null, null, null, $mobile_phone, 'bind');
        if ($boos_fordden['is_foribid'] === true) {
            echo json_encode(array("error" => $boos_fordden['msg']));exit;
        }

        list($send_result,$error) = $this->__sendVcode($mobile_phone);
        if($send_result == false){

             echo json_encode(array("error" => $error));exit;
        }
        echo json_encode(array("successs" => "验证码发送成功"));exit;
         
    }
    
    /**
     *@desc 绑定求职者 
     */
    public function pageBindPerson($inPath){
        $path_data      = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $validator      = new base_lib_Validator();
        $mobile_phone   = $validator->getMobile($path_data['phone'], "手机不正确");
        $valid_code     = base_lib_BaseUtils::getStr($path_data["msg_code"],"string","");
        $account_id     = base_lib_BaseUtils::getStr($path_data["account_id"],"int",0);
        $account_id     = !empty($account_id) ? $account_id : base_lib_BaseUtils::getCookie('accountid');
        if($validator->has_err){
            echo json_encode(array("error" => $validator->err[0],"code" => 0));exit;
        }
        
        //验证短信验证码
        $service_validate_code = new base_service_hractivity_validationcode();
        $valid = $service_validate_code->getLastValidation($mobile_phone,"id,validation_code,deadline,send_reason");
        if(empty($valid)){
            echo json_encode(array("error" =>"未发送验证码，或验证码已失效，请重新获取验证码","code" => 0));exit;
		}
		if(strtotime($valid['deadline']) < time()){
            echo json_encode(array("error" =>"对不起，您的验证码已过期","code" => 0));exit;
            
		}
		if($valid['validation_code'] != $valid_code){
            echo json_encode(array("error" =>"对不起，您的验证码错误","code" => 0));exit;
		}
        $service_validate_code->updateValidStatus($valid["id"],1); //验证成功

        $service_company = new base_service_company_company();
        /*--------------boss端企业违规封号处理- 2018-12-15 --------------*/
        $boos_fordden = $service_company->isBossForbid(null, null, null, $mobile_phone, 'bind');
        if ($boos_fordden['is_foribid'] === true) {
            echo json_encode(array("error" => $boos_fordden['msg'],"code" => 0));exit;
        }


        //获取求职者信息
        $service_person = new base_service_person_person();
        $service_related = base_service_hractivity_related::getInstance();
        
        //判断该账号是否已经被关联
        $company_id     = $this->_userid;
        $related_info    = $service_related->getRelatedByAccount($account_id,"person_id,company_id,account_id");
        if(!empty($related_info)){
            echo json_encode(array("error" =>"绑定失败，您已经绑定过了","code" => 0));exit;
        }
        
        $person = $service_person->getPersonByPhone($mobile_phone,null,"person_id,user_name,photo,password",null,1);
        if(empty($person)){
            $person_id = $this->_registerByMobile($mobile_phone);
        }else{
            $person_id = $person["person_id"];
            $related_info    = $service_related->getRelatedCompany($person_id,"person_id,company_id,account_id");
            if(!empty($related_info)){
                $service_company = new base_service_company_company();
                $company_info    = $service_company->getCompany($related_info["company_id"], 1,"company_name,company_shortname");
                $_company_name   = $company_info["company_name"];
                echo json_encode(array("error" =>"该手机号已和【{$_company_name}】绑定，确认后将与其解除绑定状态，并和目前登录账号进行绑定！","code" => 2,"unbind_person_id" => $related_info["person_id"],"unbind_account_id"=>$related_info["account_id"]));exit;
            }
        }
        if(empty($person_id)){
             echo json_encode(array("error" =>"绑定失败","code" => 0));exit;
        }
        
        $related_result = $service_related->addRelated($person_id, $account_id, $company_id);
        if($related_result === false){
            echo json_encode(array("error" =>"绑定失败，请重试","code" => 0));exit;
        }
        echo json_encode(array("success" =>"绑定成功","code" => 1));exit;
    }
    
    //解绑并且绑定新手机号
    public function pageRebind($inPath){
        $path_data              = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $validator              = new base_lib_Validator();
        $mobile_phone           = $validator->getMobile($path_data['phone'], "手机不正确");
        $account_id             = base_lib_BaseUtils::getStr($path_data["account_id"],"int",0);
        $account_id             = !empty($account_id) ? $account_id : base_lib_BaseUtils::getCookie('accountid');
        $unbind_person_id       = base_lib_BaseUtils::getStr($path_data["unbind_person_id"],"int",0);
        $unbind_account_id      = base_lib_BaseUtils::getStr($path_data["unbind_account_id"],"int",0);
        
        if(empty($unbind_account_id) || empty($unbind_person_id)){
            echo json_encode(array("error" =>"解绑失败，参数错误"));exit;
        }
        if($validator->has_err){
            echo json_encode(array("error" => $validator->err[0],"code" => 0));exit;
        }
        //先解绑
        $service_person     = new base_service_person_person();
        $service_related    = base_service_hractivity_related::getInstance();
        
        $person_info        = $service_person->getPerson($unbind_person_id,"mobile_phone");
        if(empty($person_info) || $person_info["mobile_phone"] != $mobile_phone){
            echo json_encode(array("error" =>"解绑失败，待解绑人错误"));exit;
        }
        $related_info = $service_related->getRelatedByAccount($unbind_account_id, "person_id,account_id,company_id");
        if(empty($related_info) || $related_info["person_id"] != $unbind_person_id){
            echo json_encode(array("error" =>"解绑失败，待解绑账号错误"));exit;
        }
        $del_result = $service_related->delRelated($unbind_person_id, $related_info["company_id"], $unbind_account_id);
        if($del_result === false){
            echo json_encode(array("error" =>"解绑失败，待解绑账号错误"));exit;
        }
        //重新绑定
        $related_result = $service_related->addRelated($unbind_person_id, $account_id, $this->_userid);
        if($related_result === false){
            echo json_encode(array("error" =>"重新绑定失败"));exit;
        }
        echo json_encode(array("success" =>"重新绑定成功"));exit;
    }
    
    
    /**
     *@desc 注册求职者 
     */
    private function _registerByMobile($mobile_phone){
        $person['user_id']                      = '#'.$mobile_phone;
        $person['mobile_phone']                 = $mobile_phone;
        $person['mobile_phone_is_validation']   = '1';

        $person['password']     = base_lib_BaseUtils::md5_16("hb".$mobile_phone);
        $person['reg_source']   = 'app_hr_pc';
        $person['person_class'] = 1;
        $person["user_name"]    = "HR".time();
        $resume_id              = 0;

        //渠道
        $service_actionsource   = new base_service_common_actionsource();
        $service_person         = new base_service_person_person();
        $action_source          = $service_actionsource->account_bind;
        $person_id              = $service_person->addPerson($person, $operate,$action_source, $resume_id);
        if(empty($person_id)){
            return false;
        }
        return $person_id;
    }
    
    /**
     *@desc 发送登录验证码 
     * @params
     */
    private function __sendVcode($mobile_phone){
        $service_validate_code = new base_service_hractivity_validationcode();
        $error = "";
        $result = $service_validate_code->addValidationCodeByPc($mobile_phone, $error);
        return [$result,$error];
    }
    
    /**
     *@desc 图片验证码 
     */
    public function pageVerify($inPath){
        $path_data = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
		$seed = $path_data["seed"];
		$captcha = new SCaptchalu();
		$captcha->conf->type = 0;
		$captcha->conf->mode = 0;//图片模式 文字变色为1
		$captcha->conf->length =4;
		$imageResource = $captcha->getImageResource($seed);
		header("Content-type: image/png");
		if (false !== $imageResource)
		imagepng($imageResource);
    }
    
    /**
     *@desc 搜索职位 
     */
    public function pageSearchJob($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $station        = base_lib_BaseUtils::getStr($pathdata["station"],"string",null);
        //获取在招职位
        $accountid = base_lib_BaseUtils::getCookie('accountid');
        $company_resources = base_service_company_resources_resources::getInstance($this->_userid,true,$accountid);
        $chat_account_ids   = $company_resources->all_accounts;
        $service_job        = new base_service_company_job_job;
        $job_status         = new base_service_common_jobstatus();
        
        $job_list           = $service_job->getJobList($chat_account_ids, $station, $job_status->use, 'job_id,station,account_id');
        
        
        if(!$job_list){
            $job_list = [];
        }else{
            $my_job_list        = [];
            $other_job_list     = [];
            if(!empty($job_list)){
                foreach($job_list as $value){
                    if($value["account_id"] == $account_id){
                        $my_job_list[] = ["job_id"=>$value["job_id"],"station" => $value["station"]];
                    }else{
                        $other_job_list[] = ["job_id"=>$value["job_id"],"station" => $value["station"]];
                    }
                }
                $job_list = array_merge($my_job_list,$other_job_list);
            }
        }
        echo json_encode(array("job_list"=>$job_list));
    }
    
    
    public function pageSaveTemplate($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $content        = base_lib_BaseUtils::getStr($pathdata["content"],"string","");
        $id             = base_lib_BaseUtils::getStr($pathdata["id"],"int",0);
        
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        if(empty($bind_person_id)){
            echo json_encode(array("error" => "没有绑定企业APP账号，不能添加"));exit;
        }
        
        if(empty($content)){
            echo json_encode(array("error" => "内容不能为空"));exit;
        }
        
        if(mb_strlen($content) > 60){
            echo json_encode(array("error" => "内容不能超过60字"));exit;
        }
        //判断个数
        $service_template = new base_service_hractivity_msgtemplate();
        $count            = $service_template->getTemplateCount($bind_person_id);
        if(empty($id)){
            if($count >= 10){ //最多10条
                echo json_encode(array("error" => "打招呼语最多只能有10条"));exit;
            }
        }
        if(!empty($id)){
            $result  = $service_template->updateTemplate($id,$bind_person_id, $content);
        }else{
            $result = $service_template->addTemplate($bind_person_id, $content,$company_id,$account_id);
            $id     = $result;
        }
        if($result === false){
            echo json_encode(array("error" => "保存打招呼语失败"));exit;
        }
        echo json_encode(array("success" => "保存成功","id" => $id));exit;
    }
    
    /**
     *@desc 删除常用语 
     */
    public function pageDeleteTempList($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $id             = base_lib_BaseUtils::getStr($pathdata["id"],"int",0);
        
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        if(empty($bind_person_id)){
            echo json_encode(array("error" => "没有绑定企业APP账号，不能操作"));exit;
        }
        if(empty($id)){
            echo json_encode(array("error" => "删除失败，缺少打招呼语唯一编号"));exit;
        }
        
        
        $service_template = new base_service_hractivity_msgtemplate();
        $count            = $service_template->getTemplateCount($bind_person_id);
        if($count <=1){
            echo json_encode(array("error" => "删除失败，常用语至少保留一条"));exit;
        }
        
        $result = $service_template->deleteTemplate($bind_person_id, $id);
        if($result == false){
            echo json_encode(array("error" => "删除失败"));exit;
        }
        echo json_encode(array("success" => "删除成功"));exit;
    }
    
    public function pageGetResumeAndJobData($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $account_ids    = base_lib_BaseUtils::getStr($pathdata["account_ids"],"array","");
        $job_ids        = base_lib_BaseUtils::getStr($pathdata["job_ids"],"array","");
        
        //获取简历信息
        $service_resume = new base_service_person_resume_resume();
        $service_person = new base_service_person_person();
        $service_job    = new base_service_company_job_job();
        $degree_common = new base_service_common_degree();
		
        if(empty($account_ids) && empty($job_ids)){
             echo json_encode(array("status" => false));exit;
        }
        
        $job_list       = array();
        $job_status     = array();
        if(!empty($job_ids)){
            $job_ids    = array_map(function($v){
                return intval($v);
            }, $job_ids);
            $job_list   = $service_job->getJobs($job_ids, "status,job_id,end_time,is_effect,check_state,station");
            if(!empty($job_list)){
                foreach($job_list as $key => $value){
//                    array ('end_time' => array ('$lt' => $stamp)),
//					array ('status' => intval($job_status)),
//					array ('check_state' => array ('$in' => array (2, 3, 9)))
                    if($value["end_time"] < date("Y-m-d 00:00:00") || in_array($value["status"],[0,9]) || in_array($value["status"], [2,3,9]) || $value["is_effect"] == 0){
                        $job_list[$key]["job_status"] = 0;
                        $job_status[$value["job_id"]] = 0;
                    }else{
                        $job_list[$key]["job_status"] = 1;
                        $job_status[$value["job_id"]] = 1;
                    }
                    
                }
            }
        }
        $resume_data = array();
        if(!empty($account_ids)){
            $person_ids = array_map(function($v){
                $v = preg_replace('/[a-z]+/',"",$v);
                return intval($v);
            }, $account_ids);
            
            $resume_list   = $service_resume->getResumeByPersonidsV2($person_ids,"person_id,degree_id,resume_id");
            $resume_list   = base_lib_BaseUtils::array_key_assoc($resume_list, "person_id");
            if(!empty($person_ids)){
                $person_list = $service_person->getPersons($person_ids,"person_id,user_name,birthday2,start_work,sex,small_photo,photo")->items;
                $person_list = base_lib_BaseUtils::array_key_assoc($person_list, "person_id");
            }
            //是否投递
            $apply_service      = new base_service_person_apply();
            //获取在招职位
            $accountid = base_lib_BaseUtils::getCookie('accountid');
            $company_resources = base_service_company_resources_resources::getInstance($this->_userid,true,$accountid);
            $chat_company_ids   = $company_resources->all_accounts;
            
            $apply_list         = $apply_service->personIsApplyCompanys($person_ids, $chat_company_ids,"person_id,job_id")->items;
            $apply_person_ids   = base_lib_BaseUtils::getProperty($apply_list, "person_id");
            
            $default_photo  = base_lib_Constant::STYLE_URL."/img/user_img.png";
            foreach($person_ids as $person_id){
                $_data = array();
                $person_info            = $person_list[$person_id];
                $resume_info            = $resume_list[$person_id];
                $_data["resume_id"]     = $resume_info["resume_id"];
                $_data["person_id"]     = $person_info["person_id"];
                $_data["account_id"]    = "p".$person_id;
                $_data["is_apply"]      = in_array($person_id, $apply_person_ids) ? true : false;
                $_data["work_year"]     = $this->_calWorkYear($person_info["start_work"]);//工作经验
                $_data["age"]           = !empty($person_info["birthday2"]) ? base_lib_TimeUtil::ceil_diff_year($person_info['birthday2']) . '岁' : "年龄未知";//工作经验
                $_data["degree_name"]   = "学历未知";
                $_data["sex"]           = $person_info["sex"] == 1 ? "男" : "女";
                if(!empty($resume_info["degree_id"])){
                    $degree_info            = $degree_common->getDegree($resume_info["degree_id"]);
                    $_data["degree_name"]   = $degree_info;
                }
               
                //兼容判断
                if(base_lib_BaseUtils::nullOrEmpty($person_info['photo'])){
                    $_data['photo'] = $default_photo;
                }else{
                    $_data['photo'] = base_lib_Constant::YUN_ASSETS_URL_NO_HTTP . $person_info['photo'];
                }
                $resume_data[] = $_data;
            }
        }
        $resume_data = base_lib_BaseUtils::array_key_assoc($resume_data, "account_id");
        $job_list    = base_lib_BaseUtils::array_key_assoc($job_list, "job_id");
        echo json_encode(array("status" => true,"resume_list" => $resume_data,"job_status" => $job_status,"job_list" => $job_list));exit;
    }
    
    /**
	 * @Desc 格式化工作经验
	 * @param $start_work YYYY-mm-dd
	 * @return text 格式化文字
	 */
	private function _calWorkYear($start_work) {
		$basic_start_work_year = base_lib_TimeUtil::date_diff_month($start_work);		
        $workY = floor($basic_start_work_year / 12); 
        $workM = intval($basic_start_work_year % 12); 
        if ($workY <= 0 && $workM <= 6 && $workM > -6) {
            $basic_start_work_year = '应届毕业生';
        } else if ($workY == 0 && $workM > 6) {
            $basic_start_work_year = $workM . '个月工作经验';
        } else if ($basic_start_work_year <= -6) {
            $basic_start_work_year = '目前在读';
        } else {
            $basic_start_work_year = $workY . '年工作经验';
        }
        return $basic_start_work_year;
	}
   
    /**
     *@desc 发送职位聊一聊的时候 记录聊一聊发送记录 
     */
    public function pageGetSendMsgJob($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $resume_id = base_lib_BaseUtils::getStr($pathdata["resume_id"],"int",0);
        if(empty($resume_id)){
             echo json_encode(["status" => "fail"]);exit;
        }
        $service_actionsource   = new base_service_common_actionsource();
        $source                 = $service_actionsource->website;
        
        $service_resume = new base_service_person_resume_resume();
        $resume_info    = $service_resume->getResume($resume_id, "person_id");
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $qcloud_identifier  = base_lib_BaseUtils::getStr($pathdata["sess_id"],"string","");
        
        if(!empty($resume_info) && !empty($account_id)){
            $service_send_msg = new base_service_app_companyqcloudmsg();
            $items = array();
            $items["person_id"]         = $resume_info["person_id"];
            $items["resume_id"]         = $resume_id;
            $items["company_id"]        = $this->_userid;
            $items["account_id"]        = $account_id;
            $items["source"]            = (int)$source;
            if(!empty($qcloud_identifier)){
                $items["qcloud_identifier"]            = $qcloud_identifier;
            }
            $service_send_msg->addData($items);
        }
        echo json_encode(["status" => "success"]);exit;
    }
    
    
    /**
     *@desc 自动绑定 
     */
    public function pageAutoBind($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        if(!empty($bind_person_id)){
            echo json_encode(["status" => true]);exit;
        }
        
        $service_account = new base_service_company_account();
        $account_info    = $service_account->getAccount($account_id,"account_id,mobile_phone");
        if(!empty($account_info["mobile_phone"])){
            //判断是否该手机号已绑定
            $service_person = new base_service_person_person();
            $person_info    = $service_person->getPersonByPhone($account_info["mobile_phone"], null, "person_id,mobile_phone",null,1);
            if(empty($person_info)){
                //自动注册
                $reg_person_id = $service_chat->registerByMobile($account_info["mobile_phone"], $need_bind = true);
                if($reg_person_id !== false){
                    $bind_person_id = $reg_person_id;
                }
                
            }else{
                //判断有没有绑定 如果没有绑定 自动绑定
                $service_related    = base_service_hractivity_related::getInstance();
                $relate_info        = $service_related->getRelatedCompany($person_info["person_id"], "company_id,account_id");
                if(empty($relate_info)){
                    //绑定
                    $related_result = $service_related->addRelated($person_info["person_id"], $account_id, $company_id);
                    if($related_result !== false){
                        $bind_person_id = $person_info["person_id"];
                    }
                }
            }
        }
        if(!empty($bind_person_id)){
             echo json_encode(["status" => true]);exit;
        }else{
            echo json_encode(["status" => false]);exit;
        }
        
    }

    /**
     * 验证14天内企业与求职者聊天历史
     * @param $inPath
     */
    public function pageCheckChatHistory($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        $resume_id      = base_lib_BaseUtils::getStr($pathdata['resume_id'], 'int', '');
        //查询当前hr对应公司下的其他子账号
        $service_hractivity_related = new base_service_hractivity_related();
        $account_ids = $service_hractivity_related->getRelatedByCompany($company_id, 'person_id');
        /*$service_company_account = new base_service_company_account();
        $account_ids = $service_company_account->getAccountCompany($company_id,'account_id');*/
        if (empty($account_ids)) {
            return $this->jsonMsg(true, '检验成功');
        }
        $account_ids = base_lib_BaseUtils::getProperty($account_ids, 'person_id');
        $account_ids = array_diff($account_ids, [$bind_person_id]);
        //查询简历详情
        $service_resume = new base_service_person_resume_resume();
        $resume = $service_resume->getResume($resume_id, 'person_id');
        $person_id = $resume['person_id'];
        //获取企业最近一条与该求职者的聊天记录
        $service_rong_chat_record = new base_service_rong_rongchatrecord();
        $chat_record = $service_rong_chat_record->getRecord($person_id, $account_ids, 'job_id,from_account, to_account, send_origin, p_name, hr_name', time() - 14*24*3600);
        if (empty($chat_record)) {
            return $this->jsonMsg(true, '检验成功');
        }
        $station = array(
            'station' => ''
        );
        $hr_info = array(
            'user_name' => ''
        );
        if (!empty($chat_record)) {
            $service_job = new base_service_company_job_job();
            $station = $service_job->selectOne(['job_id' => $chat_record['job_id']], 'station');
            //通过当前的account_id获取绑定的person
            $hr_person_id = $chat_record['send_origin'] == 1 ? $chat_record['from_account'] : $chat_record['to_account'];
            $hr_person_related_info = $service_hractivity_related->getRelatedCompany($hr_person_id, 'account_id');
            //通过account_id查找hr信息
            $service_hr = new base_service_company_account();
            $hr_info = $service_hr->getAccount($hr_person_related_info['account_id'], 'user_name');
        }
        return $this->jsonMsg(false, $chat_record['p_name'] . '在14天内被您的企业账号【' . $hr_info['user_name'] . '】沟通过职位【' . $station['station'] . '】');
    }

    /**
     * 验证求职者聊天历史
     * @param $inPath
     * @return mixed|string
     */
    public function pageCheckChatHistoryV2($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $company_id     = $this->_userid;
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $resume_id      = base_lib_BaseUtils::getStr($pathdata['resume_id'], 'int', '');
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        //获取该企业下的其他子账号
        $service_hractivity_related = new base_service_hractivity_related();
        $account_ids = $service_hractivity_related->getRelatedByCompany($company_id, 'person_id');
        if (empty($account_ids)) {
            return $this->jsonMsg(true, '检验成功');
        }
        //查询简历详情
        $service_resume = new base_service_person_resume_resume();
        $resume = $service_resume->getResume($resume_id, 'person_id');
        $person_id = $resume['person_id'];

        //获取企业最近一条与该求职者的聊天记录
        $service_companyqcloudmsg = new base_service_app_companyqcloudmsg();
        $chat_record = $service_companyqcloudmsg->getRecord($person_id, $company_id, $account_id, 'id,account_id', time() -14*24*3600);
        if (empty($chat_record)) {
            return $this->jsonMsg(true, '检验成功');
        }
        //获取求职者信息
        $service_person = new base_service_person_person();
        $person_info = $service_person->getPerson($person_id, 'user_name');
        $hr_info = array(
            'user_name' => ''
        );
        if (!empty($chat_record)) {
            //通过account_id查找hr信息
            $service_hr = new base_service_company_account();
            $hr_info = $service_hr->getAccount($chat_record['account_id'], 'user_name');
            //$hr_info = $service_person->getPerson($chat_record['account_id'], 'user_name');
        }
        return $this->jsonMsg(false, $person_info['user_name'] . '在14天内被您的企业账号【' . $hr_info['user_name'] . '】沟通过');
    }

    /**
     * 获取聊天记录
     * @param $inPath
     * @return mixed|string
     */
    public function pageGetChatHistory($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $company_id = $this->_userid;
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        $resume_id      = base_lib_BaseUtils::getStr($pathdata['resume_id'], 'int', '');
        $date           = base_lib_BaseUtils::getStr($pathdata['msg_date'], 'string', '');
        $keyword        = base_lib_BaseUtils::getStr($pathdata['keyword'], 'string', '');
        $page           = base_lib_BaseUtils::getStr($pathdata['page'], 'int', 1);

        //查询简历详情
        $service_resume = new base_service_person_resume_resume();
        $resume = $service_resume->getResume($resume_id, 'person_id');
        $person_id = $resume['person_id'];
        //获取企业最近一条与该求职者的聊天记录
        $service_rong_chat_record = new base_service_rong_rongchatrecord();
        $params = array(
            'p_hr' => $person_id . '_' . $bind_person_id,
            'keyword' => $keyword,
            'page' => $page
        );
        $start_timestamp = time() - 30*24*3600;
        $end_timestamp = time();
        $start_date = date('Y年m月d日', $start_timestamp);
        $end_date = date('Y年m月d日', $end_timestamp);
        //获取最早有消息的日期
        $start_record = $service_rong_chat_record->getStartRecord($params, 'msg_timestamp', 'order by msg_timestamp ASC');
        if (!empty($start_record)) {
            $start_timestamp = $start_record['msg_timestamp'];
            $start_date = date('Y年m月d日', $start_timestamp);
        }
        //获取最晚有消息的日期
        $end_record = $service_rong_chat_record->getStartRecord($params, 'msg_timestamp', 'order by msg_timestamp DESC');
        if (!empty($end_record)) {
            $end_timestamp = $end_record['msg_timestamp'];
            $end_date = date('Y年m月d日', $end_timestamp);
        }
        $params['first_date_timestamp'] = $start_timestamp;
        //如果传了筛选的日期的，就有筛选的日期作为条件，否则，就用最后的一条消息的时间作为条件来筛选数据
        if (!empty($date)) {
            $params['msg_date'] = str_replace('-', '', $date);
            $msg_date = date('Y年m月d日', strtotime($date));
        }/* else {
            $params['msg_date'] = str_replace('-', '', $end_date);
            $msg_date = date('Y年m月d日', strtotime($end_date));
        }*/
        $chat_record = $service_rong_chat_record->getAllRecords($params, 'id,msg_type,job_id,station,from_name, msg_content, send_time,msg_timestamp,send_origin');
        $total_page = $chat_record->totalPage;
        $chat_record = $chat_record->items;
        foreach ($chat_record as $k => $v) {
            $chat_record[$k]['msg_date'] = date('Y年m月d日', $v['msg_timestamp']);
            $chat_record[$k]['msg_format_date'] = date('Y-m-d', $v['msg_timestamp']);
            //图片
            if ($v['msg_type'] == 2) {
                $imgs = explode(',', $v['msg_content']);
                $chat_record[$k]['msg_content'] = '';
                if (!empty($imgs[2])) {
                    $chat_record[$k]['msg_content'] .= '<img style="max-width:400px;" src="'. $imgs[2] .'">';
                }
            }
            //语音
            if ($v['msg_type'] == 3) {
                $chat_record[$k]['msg_content'] = '【语音】';
            }
        }
        $data = array(
            'list' => array_reverse($chat_record),
            'pre_page' => ($page + 1) < $total_page ? $page + 1 : $total_page,
            'after_page' => ($page - 1) > 0 ? $page - 1 : 1,
            'total_page' => $total_page,
            'curr_page' => $page,
            'msg_date' => $msg_date,
            'start_timestamp' => $start_timestamp,
            'end_timestamp' => $end_timestamp,
            'curr_timestamp' => empty($date) ? $end_timestamp : strtotime($date),
            'start_date' => $start_date,
            'end_date' => $end_date
        );
        return $this->jsonMsg(true, '查询成功', $data);
    }

    /**
     * 获取当前账号的历史联系人记录
     * @param $inPath
     * @return mixed|string
     */
    public function pageGetAccountChatHistory($inPath){
        $pathdata       = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $keyword = base_lib_BaseUtils::getStr($pathdata['keyword'], 'string', '');
        $account_id     = base_lib_BaseUtils::getCookie('accountid');
        $company_id = $this->_userid;
        $service_chat   = company_service_chat::getInstance($account_id,$company_id);
        $bind_person_id = $service_chat->getBindPersonId();
        $service_rong_chat_record = new base_service_rong_rongchatrecord();
        $params = array(
            'account_id' => $bind_person_id,
            'search_keyword' => $keyword
        );
        $init_info = [];
        $has_init_info = false;
        $params['group_by'] = 'group by p_hr';
        $params['start_timestamp'] = time() - 30*24*3600;
        $chat_records = $service_rong_chat_record->getGroupRecords($params, 'id,msg_type,from_account,to_account,send_origin,p_name, hr_name, job_id, resume_id, msg_timestamp,msg_content,station,p_hr');
        $jobs = [];
        if (!empty($chat_records)) {
            $job_ids = base_lib_BaseUtils::getProperty($chat_records, 'job_id');
            $service_job = new base_service_company_job_job();
            $jobs = $service_job->getJobsByIds($job_ids, 'job_id, station');
            $jobs = base_lib_BaseUtils::array_key_assoc($jobs, 'job_id');
        }
        //历史记录对应关系数组
        $relation_arr = [];
        $items = [];
        if (!empty($chat_records)) {
            $items = $chat_records;
            foreach($items as $k => $v) {
                if(!empty($v['resume_id']) && !empty($v['job_id'])){
                    $init_info[$k] = $this->_getPreInfo($v['resume_id'],$v['job_id']);
                }
                $relation_arr[$v['p_hr']] = $k;
            }
            $resume_ids = base_lib_BaseUtils::getProperty($items, 'resume_id');
            $service_resume = new base_service_person_resume_resume();
            $resume = $service_resume->getResumes($resume_ids, 'person_id, resume_id');
            $resume = base_lib_BaseUtils::array_key_assoc($resume->items, 'person_id');
            $person_ids = base_lib_BaseUtils::getProperty($resume, 'person_id');
            $service_person = new base_service_person_person();
            $person = $service_person->getPersons($person_ids, 'person_id, photo');
            $person_photo = base_lib_BaseUtils::array_key_assoc($person->items, 'person_id', true);
            foreach($person_photo as $pk => $pv) {
                $items[$relation_arr[$pv['person_id'] . '_' . $bind_person_id]]['photo'] = $pv['photo'];
            }
            $default_photo  = base_lib_Constant::STYLE_URL."/img/user_img.png";
            foreach($items as $k => $v) {
                if (!empty($v['job_id'])) {
                    $items[$k]['station'] = !empty($jobs[$v['job_id']]['station']) ? $jobs[$v['job_id']]['station'] : '';
                }
                //兼容判断
                if(base_lib_BaseUtils::nullOrEmpty($items[$k]['photo'])){
                    $items[$k]['photo'] = $default_photo;
                }else{
                    $items[$k]['photo'] = base_lib_Constant::YUN_ASSETS_URL_NO_HTTP . $items[$k]['photo'];
                }
                if ($v['msg_type'] == 2) {
                    $items[$k]['msg_content'] = '【图片】';
                }
                if ($v['msg_type'] == 3) {
                    $items[$k]['msg_content'] = '【语音】';
                }
            }
        }
        if(!empty($init_info)){
            $has_init_info = true;
        }

        $data = array(
            'list' => $items,
            'has_init_info' => $has_init_info,
            'init_info' => $init_info
        );
        return $this->jsonMsg(true, '查询成功', $data);
    }
    
    /**
     *@desc 绑定账号 
     */
    public function pageBindAccount($inPath){
        $path_data      = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $path_data      = base_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
        $account_id     = base_lib_BaseUtils::getStr($path_data["account_id"],"int",0);
        if(empty($account_id)){
            echo json_encode(array("error" =>"绑定失败，缺少账号编号","code" => 0));exit;
        }
        //获取求职者信息
        $service_person = new base_service_person_person();
        $service_related = base_service_hractivity_related::getInstance();
        
        //判断该账号是否已经被关联
        $company_id     = $this->_userid;
        $related_info    = $service_related->getRelatedByAccount($account_id,"person_id,company_id,account_id");
        if(!empty($related_info)){
            echo json_encode(array("error" =>"绑定失败，您已经绑定过了","code" => 0));exit;
        }
        $service_account = new base_service_company_account();
        $account_info    = $service_account->getAccount($account_id,"account_id,mobile_phone");
        if(empty($account_info) || empty($account_info["mobile_phone"])){
            echo json_encode(array("error" =>"绑定失败，该账号没有手机号","code" => 0));exit;
        }
        $mobile_phone = $account_info["mobile_phone"];
        $person = $service_person->getPersonByPhone($mobile_phone,null,"person_id,user_name,photo,password",null,1);
        if(empty($person)){
            $person_id = $this->_registerByMobile($mobile_phone);
        }else{
            $person_id = $person["person_id"];
            $related_info    = $service_related->getRelatedCompany($person_id,"person_id,company_id,account_id");
            if(!empty($related_info)){
                $service_company = new base_service_company_company();
                $company_info    = $service_company->getCompany($related_info["company_id"], 1,"company_name,company_shortname");
                $_company_name   = $company_info["company_name"];
                echo json_encode(array("error" =>"该手机号已和【{$_company_name}】绑定，需解绑后才能继续绑定",
                    "code" => 2,"unbind_person_id" => $related_info["person_id"],"unbind_account_id"=>$related_info["account_id"]));exit;
            }
        }
        if(empty($person_id)){
             echo json_encode(array("error" =>"绑定失败","code" => 0));exit;
        }
        
        $related_result = $service_related->addRelated($person_id, $account_id, $company_id);
        if($related_result === false){
            echo json_encode(array("error" =>"绑定失败，请重试","code" => 0));exit;
        }
        echo json_encode(array("success" =>"绑定成功","code" => 1));exit;
    }
    
    private function _isHttps(){
        if ( !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off') {
            return true;
        } elseif ( isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https' ) {
            return true;
        } elseif ( !empty($_SERVER['HTTP_FRONT_END_HTTPS']) && strtolower($_SERVER['HTTP_FRONT_END_HTTPS']) !== 'off') {
            return true;
        }
        return false;
    }
}